import zoneinfo
import datetime

import pandas as pd

days = [{'start': datetime.datetime(2022, 9, 13, 0, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 1, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.61}, {'start': datetime.datetime(2022, 9, 13, 1, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 2, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.46}, {'start': datetime.datetime(2022, 9, 13, 2, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 3, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.37}, {'start': datetime.datetime(2022, 9, 13, 3, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 4, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.35}, {'start': datetime.datetime(2022, 9, 13, 4, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 5, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.36}, {'start': datetime.datetime(2022, 9, 13, 5, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 6, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.56}, {'start': datetime.datetime(2022, 9, 13, 6, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 7, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.82}, {'start': datetime.datetime(2022, 9, 13, 7, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 8, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.93}, {'start': datetime.datetime(2022, 9, 13, 8, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 9, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 1.05}, {'start': datetime.datetime(2022, 9, 13, 9, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 10, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 1.03}, {'start': datetime.datetime(2022, 9, 13, 10, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 11, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 1.12}, {'start': datetime.datetime(2022, 9, 13, 11, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 12, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 1.18}, {'start': datetime.datetime(2022, 9, 13, 12, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 13, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 1.13}, {'start': datetime.datetime(2022, 9, 13, 13, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 14, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 1.08}, {'start': datetime.datetime(2022, 9, 13, 14, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 15, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.99}, {'start': datetime.datetime(2022, 9, 13, 15, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 16, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.99}, {'start': datetime.datetime(2022, 9, 13, 16, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 17, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.89}, {'start': datetime.datetime(2022, 9, 13, 17, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 18, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.86}, {'start': datetime.datetime(2022, 9, 13, 18, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 19, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.87}, {'start': datetime.datetime(2022, 9, 13, 19, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 20, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.86}, {'start': datetime.datetime(2022, 9, 13, 20, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 21, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.84}, {'start': datetime.datetime(2022, 9, 13, 21, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 22, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.81}, {'start': datetime.datetime(2022, 9, 13, 22, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 23, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.6}, {'start': datetime.datetime(2022, 9, 13, 23, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 14, 0, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.36}]
#@time_trigger("cron(*/1 * * * *)")
def lowest_price_window(window_size=3, periods=3, **kwargs):
    sensor_name = 'sensor.nordpool_kwh_trheim_nok_2_10_025'
    #days = state.getattr(sensor_name).get('raw_today')# + state.getattr(sensor_name).get('raw_tomorrow')
    windows = {}

    #days = [{'start': datetime.datetime(2022, 9, 13, 0, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 1, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.61}, {'start': datetime.datetime(2022, 9, 13, 1, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 2, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.46}, {'start': datetime.datetime(2022, 9, 13, 2, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 3, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.37}, {'start': datetime.datetime(2022, 9, 13, 3, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 4, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.35}, {'start': datetime.datetime(2022, 9, 13, 4, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 5, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.36}, {'start': datetime.datetime(2022, 9, 13, 5, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 6, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.56}, {'start': datetime.datetime(2022, 9, 13, 6, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 7, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.82}, {'start': datetime.datetime(2022, 9, 13, 7, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 8, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.93}, {'start': datetime.datetime(2022, 9, 13, 8, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 9, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 1.05}, {'start': datetime.datetime(2022, 9, 13, 9, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 10, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 1.03}, {'start': datetime.datetime(2022, 9, 13, 10, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 11, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 1.12}, {'start': datetime.datetime(2022, 9, 13, 11, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 12, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 1.18}, {'start': datetime.datetime(2022, 9, 13, 12, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 13, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 1.13}, {'start': datetime.datetime(2022, 9, 13, 13, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 14, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 1.08}, {'start': datetime.datetime(2022, 9, 13, 14, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 15, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.99}, {'start': datetime.datetime(2022, 9, 13, 15, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 16, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.99}, {'start': datetime.datetime(2022, 9, 13, 16, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 17, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.89}, {'start': datetime.datetime(2022, 9, 13, 17, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 18, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.86}, {'start': datetime.datetime(2022, 9, 13, 18, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 19, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.87}, {'start': datetime.datetime(2022, 9, 13, 19, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 20, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.86}, {'start': datetime.datetime(2022, 9, 13, 20, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 21, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.84}, {'start': datetime.datetime(2022, 9, 13, 21, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 22, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.81}, {'start': datetime.datetime(2022, 9, 13, 22, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 13, 23, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.6}, {'start': datetime.datetime(2022, 9, 13, 23, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'end': datetime.datetime(2022, 9, 14, 0, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Oslo')), 'value': 0.36}]
    for i in range(0, len(days)): #, window_size):
        try:
            start = days[i].get('start')
            end = days[i + window_size - 1].get('end')
            window = days[i : i + window_size]

            price_window = round(sum([price.get('value') for price in window]), 3)

            windows[price_window] = {start, end}
        except IndexError:
            continue

    p =  sorted(windows.items())[:periods]

    for k, v in p:
        log.error(k)
        log.error(v)

#@time_trigger("cron(*/1 * * * *)")
def lowest_price_window_pandas(window_size=3, periods=3, **kwargs):
    sensor_name = 'sensor.nordpool_kwh_trheim_nok_2_10_025'
    days = state.getattr(sensor_name).get('raw_today') + state.getattr(sensor_name).get('raw_tomorrow')
    test = []
    for hour in days:
        h = {}
        h['start'] = str(hour.get('start'))
        h['end'] = str(hour.get('end'))
        h['value'] = hour.get('value')
        test.append(h)

    df = pd.DataFrame(test)

    df['date'] = pd.date_range(df['start'], df['end'])
    df = df.set_index(['date'])

    log.error(df.rolling(window_size, on='value').sum())